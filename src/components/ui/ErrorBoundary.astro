---
export interface Props {
  fallback?: string;
  class?: string;
}

const { fallback = "Something went wrong. Please try again.", class: className = "" } = Astro.props;
---

<div class={`error-boundary ${className}`} id="error-boundary" style="display: none;">
  <div class="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
    <svg class="w-12 h-12 text-red-500 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
      <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
    </svg>
    <h3 class="text-lg font-semibold text-red-800 mb-2">Oops! Something went wrong</h3>
    <p class="text-red-700 mb-4">{fallback}</p>
    <button
      onclick="window.location.reload()"
      class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
    >
      Try Again
    </button>
  </div>
</div>

<script>
  // Global error handler
  window.addEventListener('error', (event) => {
    console.error('Global error:', event.error);
    showErrorBoundary();
  });

  window.addEventListener('unhandledrejection', (event) => {
    console.error('Unhandled promise rejection:', event.reason);
    showErrorBoundary();
  });

  function showErrorBoundary() {
    const errorBoundary = document.getElementById('error-boundary');
    if (errorBoundary) {
      errorBoundary.style.display = 'block';
    }
  }

  // Make function globally available
  window.showErrorBoundary = showErrorBoundary;
</script>