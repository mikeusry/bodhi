---
/**
 * CloudinaryHeroSlideshow - Dynamic slideshow hero component
 *
 * Features:
 * - Auto-rotating image slideshow
 * - Smooth fade transitions
 * - Ken Burns effect (subtle zoom/pan)
 * - Optimized Cloudinary images
 * - Performance optimized
 */

import type { CloudinaryTransformation } from '../../lib/cloudinary-types';
import { generateCloudinaryUrl } from '../../lib/cloudinary-enhanced';

interface Props {
  images: string[]; // Array of Cloudinary public IDs
  alt: string;
  overlay?: boolean;
  overlayOpacity?: number;
  overlayColor?: string;
  minHeight?: string;
  maxHeight?: string;
  autoplay?: boolean;
  interval?: number; // milliseconds
  kenBurns?: boolean;
  priority?: boolean;
  className?: string;
  containerClassName?: string;
}

const {
  images,
  alt,
  overlay = true,
  overlayOpacity = 0.6,
  overlayColor = 'bg-black',
  minHeight = '100vh',
  maxHeight,
  autoplay = true,
  interval = 5000,
  kenBurns = true,
  priority = true,
  className = '',
  containerClassName = ''
} = Astro.props;

// Hero-specific transformations
const heroTransformation: CloudinaryTransformation = {
  width: 1920,
  height: 1080,
  crop: 'fill',
  gravity: 'auto',
  quality: 'auto:best',
  format: 'auto',
  dpr: 'auto'
};

// Generate optimized URLs for all images
const imageUrls = images.map(publicId => {
  const fullPublicId = publicId.startsWith('banyan_tree/flat_mountain/')
    ? publicId
    : `banyan_tree/flat_mountain/${publicId}`;
  return generateCloudinaryUrl(fullPublicId, heroTransformation);
});

const containerStyles = {
  minHeight,
  ...(maxHeight && { maxHeight }),
  position: 'relative',
  overflow: 'hidden'
};

const overlayStyles = {
  opacity: overlayOpacity
};

// Generate unique ID for this slideshow instance
const slideshowId = `slideshow-${Math.random().toString(36).substring(2, 15)}`;
---

<section
  class={`
    cloudinary-hero-slideshow
    ${containerClassName}
    relative flex items-center justify-center w-full
  `}
  style={containerStyles}
  data-slideshow-id={slideshowId}
>
  <!-- Image containers for slideshow -->
  {imageUrls.map((url, index) => (
    <div
      class={`
        slideshow-image absolute inset-0 transition-opacity duration-1000 ease-in-out
        ${index === 0 ? 'opacity-100' : 'opacity-0'}
        ${kenBurns ? 'ken-burns' : ''}
      `}
      data-slide-index={index}
    >
      <img
        src={url}
        alt={`${alt} - Image ${index + 1}`}
        class={`w-full h-full object-cover ${className}`}
        loading={priority && index === 0 ? 'eager' : 'lazy'}
        decoding="async"
        style={{ objectPosition: 'center' }}
      />
    </div>
  ))}

  <!-- Overlay -->
  {overlay && (
    <div
      class={`absolute inset-0 ${overlayColor} z-10`}
      style={overlayStyles}
    ></div>
  )}

  <!-- Content Slot -->
  <div class="relative z-20 w-full h-full flex items-center justify-center">
    <slot />
  </div>

  <!-- Slideshow indicators (optional) -->
  <div class="absolute bottom-6 left-1/2 transform -translate-x-1/2 z-30 flex space-x-2">
    {imageUrls.map((_, index) => (
      <button
        class={`
          slideshow-indicator w-3 h-3 rounded-full transition-all duration-300
          ${index === 0 ? 'bg-white' : 'bg-white/50'}
        `}
        data-slide-target={index}
        aria-label={`Go to slide ${index + 1}`}
      ></button>
    ))}
  </div>
</section>

<script define:vars={{ slideshowId, autoplay, interval, imageUrls }}>
  document.addEventListener('DOMContentLoaded', function() {
    const slideshow = document.querySelector(`[data-slideshow-id="${slideshowId}"]`);
    if (!slideshow) return;

    const slides = slideshow.querySelectorAll('.slideshow-image');
    const indicators = slideshow.querySelectorAll('.slideshow-indicator');
    let currentSlide = 0;
    let isTransitioning = false;
    let autoplayInterval;

    // Preload all images
    imageUrls.forEach((url, index) => {
      if (index > 0) { // First image already loaded
        const img = new Image();
        img.src = url;
      }
    });

    function goToSlide(index) {
      if (isTransitioning || index === currentSlide) return;

      isTransitioning = true;

      // Update slides
      slides[currentSlide].classList.remove('opacity-100');
      slides[currentSlide].classList.add('opacity-0');

      slides[index].classList.remove('opacity-0');
      slides[index].classList.add('opacity-100');

      // Update indicators
      indicators[currentSlide].classList.remove('bg-white');
      indicators[currentSlide].classList.add('bg-white/50');

      indicators[index].classList.remove('bg-white/50');
      indicators[index].classList.add('bg-white');

      currentSlide = index;

      // Reset transition lock after animation
      setTimeout(() => {
        isTransitioning = false;
      }, 1000);
    }

    function nextSlide() {
      const next = (currentSlide + 1) % slides.length;
      goToSlide(next);
    }

    function startAutoplay() {
      if (autoplay && slides.length > 1) {
        autoplayInterval = setInterval(nextSlide, interval);
      }
    }

    function stopAutoplay() {
      if (autoplayInterval) {
        clearInterval(autoplayInterval);
      }
    }

    // Set up indicator click handlers
    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        stopAutoplay();
        goToSlide(index);
        // Restart autoplay after user interaction
        setTimeout(startAutoplay, 3000);
      });
    });

    // Pause on hover
    slideshow.addEventListener('mouseenter', stopAutoplay);
    slideshow.addEventListener('mouseleave', startAutoplay);

    // Start autoplay
    startAutoplay();

    // Pause when page is not visible
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        stopAutoplay();
      } else {
        startAutoplay();
      }
    });
  });
</script>

<style>
  .cloudinary-hero-slideshow {
    /* Ensure hero takes full viewport */
    width: 100vw;
    margin-left: calc(-50vw + 50%);
  }

  /* Ken Burns effect */
  .ken-burns img {
    animation: kenBurns 20s infinite alternate ease-in-out;
    transform-origin: center center;
  }

  .ken-burns:nth-child(2) img {
    animation-delay: -5s;
  }

  .ken-burns:nth-child(3) img {
    animation-delay: -10s;
  }

  .ken-burns:nth-child(4) img {
    animation-delay: -15s;
  }

  .ken-burns:nth-child(5) img {
    animation-delay: -20s;
  }

  @keyframes kenBurns {
    0% {
      transform: scale(1) translate(0, 0);
    }
    25% {
      transform: scale(1.05) translate(-1%, 1%);
    }
    50% {
      transform: scale(1.1) translate(1%, -1%);
    }
    75% {
      transform: scale(1.05) translate(-0.5%, 0.5%);
    }
    100% {
      transform: scale(1) translate(0, 0);
    }
  }

  /* Smooth transitions */
  .slideshow-image {
    transition: opacity 1s ease-in-out;
  }

  .slideshow-indicator {
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .slideshow-indicator:hover {
    background-color: white;
    transform: scale(1.2);
  }

  /* Performance optimizations */
  .slideshow-image img {
    content-visibility: auto;
    contain-intrinsic-size: 1920px 1080px;
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .cloudinary-hero-slideshow {
      min-height: 60vh;
    }

    /* Disable Ken Burns on mobile for performance */
    .ken-burns img {
      animation: none;
      transform: none;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .ken-burns img {
      animation: none;
      transform: none;
    }

    .slideshow-image {
      transition: none;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .slideshow-indicator {
      border: 2px solid white;
    }
  }
</style>