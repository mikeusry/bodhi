---
import '../styles/global.css';
import type { SEOData } from '../lib/seo';
import { generateLocalBusinessSchema, propertySEO } from '../lib/seo';

export interface Props {
  title?: string;
  description?: string;
  canonicalURL?: string;
  image?: string;
  seoData?: SEOData;
}

const {
  title,
  description,
  canonicalURL = Astro.site ? new URL(Astro.url.pathname, Astro.site) : Astro.url,
  image,
  seoData
} = Astro.props;

// Use SEO data if provided, otherwise fall back to props or defaults
const finalTitle = seoData?.title || title || propertySEO.siteName;
const finalDescription = seoData?.description || description || 'Escape to The Bodhi - a luxury 5-bedroom mountain estate in prestigious Flat Mountain Estates. Sleeps 17 guests with private theater, koi pond, and stunning Blue Ridge Mountain views.';
const finalImage = seoData?.image || image || propertySEO.defaultImage;
const finalCanonicalURL = seoData?.canonicalURL || canonicalURL;

// Generate structured data
const localBusinessSchema = generateLocalBusinessSchema();
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth" data-theme="light">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- SEO Meta Tags -->
    <title>{finalTitle}</title>
    <link rel="canonical" href={finalCanonicalURL} />

    <!-- Keywords -->
    {seoData?.type === 'article' && (
      <meta name="article:published_time" content={seoData.publishedTime} />
      <meta name="article:modified_time" content={seoData.modifiedTime} />
    )}

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={seoData?.type || "website"} />
    <meta property="og:url" content={finalCanonicalURL} />
    <meta property="og:title" content={finalTitle} />
    <meta property="og:description" content={finalDescription} />
    <meta property="og:image" content={finalImage.startsWith('http') ? finalImage : propertySEO.baseURL + finalImage} />
    <meta property="og:site_name" content={propertySEO.siteName} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={finalCanonicalURL} />
    <meta property="twitter:title" content={finalTitle} />
    <meta property="twitter:description" content={finalDescription} />
    <meta property="twitter:image" content={finalImage.startsWith('http') ? finalImage : propertySEO.baseURL + finalImage} />

    <!-- Additional SEO Tags -->
    <meta name="robots" content="index,follow" />
    <meta name="googlebot" content="index,follow" />
    <meta name="geo.region" content="US-NC" />
    <meta name="geo.placename" content="Highlands, North Carolina" />
    <meta name="geo.position" content="35.0531;-83.1960" />
    <meta name="ICBM" content="35.0531, -83.1960" />

    <!-- Local Business Schema -->
    <script type="application/ld+json" set:html={JSON.stringify(localBusinessSchema)}></script>

    <!-- Performance & Technical SEO -->
    <meta name="theme-color" content="#567d5f" />
    <meta name="msapplication-TileColor" content="#567d5f" />
    <meta name="format-detection" content="telephone=no" />

    <!-- DNS Prefetch for performance -->
    <link rel="dns-prefetch" href="//res.cloudinary.com" />
    <link rel="dns-prefetch" href="//fonts.googleapis.com" />
    <link rel="dns-prefetch" href="//fonts.gstatic.com" />

    <!-- Preload Brand Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Abril+Fatface&display=swap" rel="stylesheet">

    <!-- Progressive Web App -->
    <link rel="manifest" href="/manifest.json" />

    <!-- Preload critical resources -->
    <link rel="preload" href="https://res.cloudinary.com/southland-organics/image/upload/c_fill,w_1920,h_1080,q_auto:best,f_auto/banyan_tree/flat_mountain/hero-exterior_rdyocb" as="image" />
    <link rel="preload" href="https://fonts.googleapis.com/css2?family=Abril+Fatface&display=swap" as="style" />

    <!-- Security Headers -->
    <meta http-equiv="X-Content-Type-Options" content="nosniff" />
    <meta http-equiv="X-Frame-Options" content="DENY" />
    <meta http-equiv="X-XSS-Protection" content="1; mode=block" />

    <!-- Structured Data Breadcrumbs -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "BreadcrumbList",
      "itemListElement": [
        {
          "@type": "ListItem",
          "position": 1,
          "name": "Highlands NC Vacation Rentals",
          "item": "https://highlands-rental.com"
        },
        {
          "@type": "ListItem",
          "position": 2,
          "name": "The Bodhi Property",
          "item": "https://highlands-rental.com/property"
        }
      ]
    }
    </script>

    <!-- Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-F3MK4RFCGJ"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-F3MK4RFCGJ', {
        page_title: document.title,
        page_location: window.location.href
      });
    </script>
  </head>
  <body class="font-nimbus-sans text-granite bg-canvas antialiased">
    <slot />

    <!-- Accessibility & UX Enhancements -->
    <script>
      // Service Worker Registration
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/sw.js')
            .then((registration) => {
              console.log('SW registered: ', registration);
            })
            .catch((registrationError) => {
              console.log('SW registration failed: ', registrationError);
            });
        });
      }

      // Skip to main content for screen readers
      document.addEventListener('DOMContentLoaded', () => {
        const skipLink = document.createElement('a');
        skipLink.href = '#main-content';
        skipLink.textContent = 'Skip to main content';
        skipLink.className = 'sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-felted-green text-white px-4 py-2 rounded-lg z-50';
        document.body.insertBefore(skipLink, document.body.firstChild);

        // Add main content ID to first main element
        const main = document.querySelector('main');
        if (main && !main.id) {
          main.id = 'main-content';
        }
      });

      // Focus management for modal/overlay interactions
      let lastFocusedElement = null;

      function trapFocus(element) {
        const focusableElements = element.querySelectorAll(
          'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        );
        const firstFocusable = focusableElements[0];
        const lastFocusable = focusableElements[focusableElements.length - 1];

        element.addEventListener('keydown', (e) => {
          if (e.key === 'Tab') {
            if (e.shiftKey) {
              if (document.activeElement === firstFocusable) {
                lastFocusable.focus();
                e.preventDefault();
              }
            } else {
              if (document.activeElement === lastFocusable) {
                firstFocusable.focus();
                e.preventDefault();
              }
            }
          }

          if (e.key === 'Escape') {
            closeModal(element);
          }
        });
      }

      function closeModal(modal) {
        modal.style.display = 'none';
        if (lastFocusedElement) {
          lastFocusedElement.focus();
        }
      }

      // Announce dynamic content changes to screen readers
      function announceToScreenReader(message) {
        const announcement = document.createElement('div');
        announcement.setAttribute('aria-live', 'polite');
        announcement.setAttribute('aria-atomic', 'true');
        announcement.className = 'sr-only';
        announcement.textContent = message;
        document.body.appendChild(announcement);

        setTimeout(() => {
          document.body.removeChild(announcement);
        }, 1000);
      }

      // Make functions globally available
      window.trapFocus = trapFocus;
      window.closeModal = closeModal;
      window.announceToScreenReader = announceToScreenReader;
    </script>

    <!-- Screen Reader Only Styles -->
    <style>
      .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
      }

      .focus\:not-sr-only:focus {
        position: static;
        width: auto;
        height: auto;
        padding: 0.5rem 1rem;
        margin: 0;
        overflow: visible;
        clip: auto;
        white-space: normal;
      }

      /* High contrast mode support */
      @media (prefers-contrast: high) {
        * {
          border-color: ButtonText !important;
        }
      }

      /* Reduced motion support */
      @media (prefers-reduced-motion: reduce) {
        *,
        *::before,
        *::after {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
          scroll-behavior: auto !important;
        }
      }

      /* Focus visible styles */
      *:focus-visible {
        outline: 2px solid #567d5f;
        outline-offset: 2px;
      }
    </style>
  </body>
</html>